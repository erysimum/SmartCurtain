"""
This is a Python template for Alexa to get you building skills (conversations) quickly.
"""

from __future__ import print_function
import boto3
import json
import decimal
from boto3.dynamodb.conditions import Key, Attr
from botocore.exceptions import ClientError


# --------------- Helpers that build all of the responses ----------------------
current = 0
id = 0

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }

def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


# --------------- Functions that control the skill's behavior ------------------

def get_opencurtain_response():
    """ An example of a custom intent. Same structure as welcome message, just make sure to add this intent
    in your alexa skill in order for it to work.
    """
    global current
    global id
    session_attributes = {}
    open=0
    temp=open
    card_title = "Test"
    print('before current open side')
    print(current)
    if  (current==temp): 
        output= "The curtain  is in opening state "
    if (temp==0 and (current==1 or current==2)): 
        output = "The  curtain  is opening now "
        current=temp
        temp=None
    # insert_data(current)
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('curtaintable')
    response = table.put_item(
    Item={
        'id':id+1,
        'current_state': current
        }
    )
    speech_output = output
    reprompt_text = "You never responded to the first test message. Sending another one."
    should_end_session = False
    print(current)
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
        
        
# insert_data function for inserting data into dynamodb table
# def insert_data(current_now):
#     dynamodb = boto3.resource('dynamodb')
#     table = dynamodb.Table('curtaintable')
#     response = table.put_item(
#     Item={
#         'current_state': current_now
#         }
#     )
    
def get_closecurtain_response():
    """ An example of a custom intent. Same structure as welcome message, just make sure to add this intent
    in your alexa skill in order for it to work.
    """
    global current
    session_attributes = {}
    close=1
    temp=close
    card_title = "Test"
    print('before current')
    print(current)
    if  (current==temp): 
        output= "The curtain  is in closing state "
    if (temp==1 and (current==0 or current==2)): 
        output = "The  curtain  is closing now "
        current=temp
        temp=None
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('curtaintable')
    response = table.put_item(
    Item={
        'id':id+1,
        'current_state': current
        }
    )
    # if (temp==1 and current==0): 
    #     output = "The  curtain  is closing now"
    #     current=temp
    #     temp=None
    # else: 
    #     output = "The  curtain  is opening now"
    #     current=temp
    #     temp=None
    
    speech_output = output
    reprompt_text = "You never responded to the first test message. Sending another one."
    should_end_session = False
    print(current)
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
        
def get_stopcurtain_response():
    """ An example of a custom intent. Same structure as welcome message, just make sure to add this intent
    in your alexa skill in order for it to work.
    """
    global current
    session_attributes = {}
    stop=2
    temp=stop
    card_title = "Test"
    print('before current')
    print(current)
    if  (current==temp): 
        output= "The curtain  is in closing state "
    if (temp==2): 
        output = "The  curtain  is stopped "
        current=temp
        temp=None
    
    
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('curtaintable')
    response = table.put_item(
    Item={
        'id':id+1,
        'current_state': current
        }
    )
    # if (temp==1 and current==0): 
    #     output = "The  curtain  is closing now"
    #     current=temp
    #     temp=None
    # else: 
    #     output = "The  curtain  is opening now"
    #     current=temp
    #     temp=None
    
    speech_output = output
    reprompt_text = "You never responded to the first test message. Sending another one."
    should_end_session = False
    print(current)
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))   
        
        
def get_confirmcurtainstate_response():
    """ An example of a custom intent. Same structure as welcome message, just make sure to add this intent
    in your alexa skill in order for it to work.
    """
    global current
    session_attributes = {}
    
    card_title = "Test"
    print(current)
    if  (current==0): 
        output= "The curtain  is in opening state "
    if  (current==1): 
        output= "The curtain  is in closing state "
    if  (current==2): 
        output= "The curtain  is in stopped state "
   
    speech_output = output
    reprompt_text = "You never responded to the first test message. Sending another one."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))   
        
        
        

def get_welcome_response():
    """ If we wanted to initialize the session to have some attributes we could
    add those here
    """
    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Smart curtain app is opening up"
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = "I don't know if you heard me, welcome to your custom alexa application!"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Thank you for trying the Alexa Skills Kit sample. " \
                    "Have a nice day! "
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))

# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts.
        One possible use of this function is to initialize specific 
        variables from a previous state stored in an external database
    """
    # Add additional code here as needed
    pass

    

def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """
    # Dispatch to your skill's launch message
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Dispatch to your skill's intent handlers
    if intent_name == "opencurtain":
        return get_opencurtain_response()
    elif intent_name == "closecurtain":
        return get_closecurtain_response()
    elif intent_name == "stopcurtain":
        return get_stopcurtain_response()
    elif intent_name == "confirmcurtainstate":
        return get_confirmcurtainstate_response()
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("Incoming request...")

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
